{{- /*gotype:github.com/steebchen/prisma-client-go/generator.Root*/ -}}

{{ range $model := $.DMMF.Datamodel.Models }}
	{{ range $field := $model.RelationFieldsPlusOne }}
		{{ range $v := $.DMMF.Variations }}
			{{ $name := $model.Name.GoLowerCase }}
			{{ $ns := (print $name "Actions") }}

			{{ $result := (print $name "Find" $v.Name) }}
			{{ $updateResult := (print $name "Update" $v.Name) }}
			{{ $deleteResult := (print $name "Delete" $v.Name) }}

			{{ $relationName := $model.Name.GoCase }}

			{{ $orderByParam := (print $model.Name.GoCase "OrderByParam") }}

			{{ if ne $field.Name "" }}
				{{ $result = (print $name "To" $field.Name.GoCase "Find" $v.Name) }}
				{{ $updateResult = (print $name "To" $field.Name.GoCase "Update" $v.Name) }}
				{{ $deleteResult = (print $name "To" $field.Name.GoCase "Delete" $v.Name) }}
				{{ $relationName = $field.Type.GoCase }}
				{{ $orderByParam = (print $field.Type.GoCase "OrderByParam") }}
			{{ end }}

			{{ $txResult := "Unique" }}
			{{ if $v.List }}
				{{ $txResult = "Many" }}
			{{ end }}

			type {{ $result }} struct {
				query builder.Query
			}

			func (r {{ $result }}) getQuery() builder.Query {
				return r.query
			}

			func (r {{ $result }}) ExtractQuery() builder.Query {
				return r.query
			}

			func (r {{ $result }}) with() {}
			func (r {{ $result }}) {{ $model.Name.GoLowerCase }}Model() {}
			func (r {{ $result }}) {{ $model.Name.GoLowerCase }}Relation() {}

			{{ if eq $field.Name "" }}
				{{/* only allow equals & unique params for FindUnique */}}
				func (r {{ $ns }}) Find{{ $v.Name }}(
					params {{ if $v.List }}...{{ end }}{{ if $v.List }}{{ $model.Name.GoCase }}WhereParam{{ else }}{{ $model.Name.GoCase }}EqualsUniqueWhereParam{{ end }},
				) {{ $result }} {
					var v {{ $result }}
					v.query = builder.NewQuery()
					v.query.Engine = r.client

					v.query.Operation = "query"
					{{ if eq $v.Name "First" }}
						v.query.Method = "findFirst"
					{{ else }}
						v.query.Method = "find{{ $v.Name }}"
					{{ end }}
					v.query.Model = "{{ $model.Name.String }}"
					v.query.Outputs = {{ $name }}Output

					{{ if $v.List }}
						{{/* TODO create a function for this type of builder.Field colletion, also used in query.gotpl */}}
						var where []builder.Field
						for _, q := range params {
							if query := q.getQuery(); query.Operation != "" {
								v.query.Outputs = append(v.query.Outputs, builder.Output{
									Name:    query.Method,
									Inputs:  query.Inputs,
									Outputs: query.Outputs,
								})
							} else {
								where = append(where, q.field())
							}
						}

						if len(where) > 0 {
							v.query.Inputs = append(v.query.Inputs, builder.Input{
								Name:   "where",
								Fields: where,
							})
						}
					{{ else }}
						{{/* transform this document because the signature of FindUnique is different than FindMany */}}
						v.query.Inputs = append(v.query.Inputs, builder.Input{
							Name:   "where",
							Fields: builder.TransformEquals([]builder.Field{params.field()}),
						})
					{{ end }}

					return v
				}
			{{ end }}

			func (r {{ $result }}) With(params ...{{ $relationName }}RelationWith) {{ $result }} {
				for _, q := range params {
					query := q.getQuery()
					r.query.Outputs = append(r.query.Outputs, builder.Output{
						Name:    query.Method,
						Inputs:  query.Inputs,
						Outputs: query.Outputs,
					})
				}

				return r
			}

			func (r {{ $result }}) Select(params ...{{ $model.Name.GoLowerCase }}PrismaFields) {{ $result }} {
				var outputs []builder.Output

				for _, param := range params {
					outputs = append(outputs, builder.Output{
						Name: string(param),
					})
				}

				r.query.Outputs = outputs

				return r
			}

			func (r {{ $result }}) Omit(params ...{{ $model.Name.GoLowerCase }}PrismaFields) {{ $result }} {
				var outputs []builder.Output

				var raw []string
				for _, param := range params {
					raw = append(raw, string(param))
				}

				for _, output := range {{ $model.Name.GoLowerCase }}Output {
					if !slices.Contains(raw, output.Name) {
						outputs = append(outputs, output)
					}
				}

				r.query.Outputs = outputs

				return r
			}

			{{ if $v.List }}
				func (r {{ $result }}) OrderBy(params ...{{ $orderByParam }}) {{ $result }} {
					var fields []builder.Field

					for _, param := range params {
						fields = append(fields, builder.Field{
							Name: param.field().Name,
							Value: param.field().Value,
							Fields: param.field().Fields,
						})
					}

					r.query.Inputs = append(r.query.Inputs, builder.Input{
						Name:  "orderBy",
						Fields: fields,
						WrapList: true,
					})

					return r
				}

				func (r {{ $result }}) Skip(count int) {{ $result }} {
					r.query.Inputs = append(r.query.Inputs, builder.Input{
						Name:  "skip",
						Value: count,
					})
					return r
				}

				func (r {{ $result }}) Take(count int) {{ $result }} {
					r.query.Inputs = append(r.query.Inputs, builder.Input{
						Name:  "take",
						Value: count,
					})
					return r
				}

				func (r {{ $result }}) Cursor(cursor {{ $model.Name.GoCase }}CursorParam) {{ $result }} {
					r.query.Inputs = append(r.query.Inputs, builder.Input{
						Name:  "cursor",
						Fields: []builder.Field{cursor.field()},
					})
					return r
				}
			{{ end }}

			func (r {{ $result }}) Exec(ctx context.Context) (
				{{ if $v.ReturnList }}[]{{ else }}*{{ end }}{{ $model.Name.GoCase }}Model,
				error,
			) {
				var v {{ if $v.ReturnList }}[]{{ else }}*{{ end }}{{ $model.Name.GoCase }}Model
				if err := r.query.Exec(ctx, &v); err != nil {
					return nil, err
				}
				{{ if not $v.ReturnList }}
					if v == nil {
						return nil, ErrNotFound
					}
				{{ end }}
				return v, nil
			}

			func (r {{ $result }}) ExecInner(ctx context.Context) (
				{{ if $v.ReturnList }}[]{{ else }}*{{ end }}Inner{{ $model.Name.GoCase }},
				error,
			) {
				var v {{ if $v.ReturnList }}[]{{ else }}*{{ end }}Inner{{ $model.Name.GoCase }}
				if err := r.query.Exec(ctx, &v); err != nil {
					return nil, err
				}
				{{ if not $v.ReturnList }}
					if v == nil {
						return nil, ErrNotFound
					}
				{{ end }}
				return v, nil
			}

			{{ if ne $v.Name "First" }}
				{{ $returnType := print $model.Name.GoCase "Model" }}
				{{ if $v.List }}
					{{ $returnType = "BatchResult" }}
				{{ end }}

				{{/* UPDATE */}}

				func (r {{ $result }}) Update(params ...{{ $model.Name.GoCase }}SetParam) {{ $updateResult }} {
					r.query.Operation = "mutation"
					r.query.Method = "update{{ $v.InnerName }}"
					r.query.Model = "{{ $model.Name.String }}"
					{{ if $v.List }}
						r.query.Outputs = countOutput
					{{ end }}

					var v {{ $updateResult }}
					v.query = r.query
					var fields []builder.Field
					for _, q := range params {
						{{/* TODO consider upcoming non-set methods */}}
						field := q.field()
						{{/* if scalar, wrap in 'set' */}}
						_, isJson := field.Value.(types.JSON)
						if field.Value != nil && !isJson {
							v := field.Value
							field.Fields = []builder.Field{
								{
									Name: "set",
									Value: v,
								},
							}

							field.Value = nil
						}

						fields = append(fields, field)
					}
					v.query.Inputs = append(v.query.Inputs, builder.Input{
						Name:   "data",
						Fields: fields,
					})
					return v
				}

				type {{ $updateResult }} struct {
					query builder.Query
				}

				func (r {{ $updateResult }}) ExtractQuery() builder.Query {
					return r.query
				}

				func (r {{ $updateResult }}) {{ $model.Name.GoLowerCase }}Model() {}

				func (r {{ $updateResult }}) Exec(ctx context.Context) (*{{ $returnType }}, error) {
					var v {{ $returnType }}
					if err := r.query.Exec(ctx, &v); err != nil {
						return nil, err
					}
					return &v, nil
				}

				func (r {{ $updateResult }}) Tx() {{ $model.Name.GoCase }}{{ $txResult }}TxResult {
					v := new{{ $model.Name.GoCase }}{{ $txResult }}TxResult()
					v.query = r.query
					v.query.TxResult = make(chan []byte, 1)
					return v
				}

				{{/* DELETE */}}
				func (r {{ $result }}) Delete() {{ $deleteResult }} {
					var v {{ $deleteResult }}
					v.query = r.query
					v.query.Operation = "mutation"
					v.query.Method = "delete{{ $v.InnerName }}"
					v.query.Model = "{{ $model.Name.String }}"
					{{ if $v.List }}
						v.query.Outputs = countOutput
					{{ end }}
					return v
				}

				type {{ $deleteResult }} struct {
					query builder.Query
				}

				func (r {{ $deleteResult }}) ExtractQuery() builder.Query {
					return r.query
				}

				func (p {{ $deleteResult }}) {{ $model.Name.GoLowerCase }}Model() {}

				func (r {{ $deleteResult }}) Exec(ctx context.Context) (*{{ $returnType }}, error) {
					var v {{ $returnType }}
					if err := r.query.Exec(ctx, &v); err != nil {
						return nil, err
					}
					return &v, nil
				}

				func (r {{ $deleteResult }}) Tx() {{ $model.Name.GoCase }}{{ $txResult }}TxResult {
					v := new{{ $model.Name.GoCase }}{{ $txResult }}TxResult()
					v.query = r.query
					v.query.TxResult = make(chan []byte, 1)
					return v
				}
			{{ end }}
		{{ end }}
	{{ end }}
{{ end }}
