name: integration test all
on: pull_request
jobs:
  integration:
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13]

    name: integration-${{ contains(matrix.os, 'ubuntu') && 'ubuntu' || contains(matrix.os, 'windows') && 'windows' || contains(matrix.os, 'macos') && 'macos' }}

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - '.github/workflows/**/*.yml'
              - '**/*.go'
              - '**/*.gotpl'
              - '**/*.mod'
              - '**/*.sum'
              - '**/*.work'

      # fix for GitHub actions MacOS
      - name: Setup docker
        if: runner.os == 'macos' && steps.changes.outputs.go == 'true'
        uses: douglascamata/setup-docker-macos-action@v1-alpha

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache
          restore-keys: ${{ runner.os }}-go-
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: test
        if: steps.changes.outputs.go == 'true'
        run: docker build . --build-arg IMAGE="golang:1" -f test/integration/integration.dockerfile -t integration && docker run integration

  integration-alpine:
    name: "integration-alpine"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            go:
              - '.github/workflows/**/*.yml'
              - '**/*.go'
              - '**/*.gotpl'
              - '**/*.mod'
              - '**/*.sum'
              - '**/*.work'

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache
          restore-keys: ${{ runner.os }}-go-
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: test on alpine
        if: steps.changes.outputs.go == 'true'
        run: docker build . --build-arg IMAGE="golang:1-alpine" -f test/integration/integration.dockerfile -t integration && docker run integration
